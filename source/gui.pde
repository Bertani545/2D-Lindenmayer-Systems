/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void Iterations_change(GTextField source, GEvent event) { //_CODE_:Iterations_Input:826709:
  println("Iterations - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:Iterations_Input:826709:

public void XCoord_Change(GTextField source, GEvent event) { //_CODE_:X_Coord:720072:
  println("X_Coord - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:X_Coord:720072:

public void YCoord_Change(GTextField source, GEvent event) { //_CODE_:Y_Coord:282210:
  println("Y_Coord - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:Y_Coord:282210:

public void Axiom_Changed(GTextField source, GEvent event) { //_CODE_:Axiom_Input:564875:
  println("Axiom_Input - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:Axiom_Input:564875:

public void Letters_Changed(GTextField source, GEvent event) { //_CODE_:Letters_Input:921953:
  println("Letters_Input - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:Letters_Input:921953:

public void Rules_Changed(GTextArea source, GEvent event) { //_CODE_:Rules_Input:350320:
  println("textarea1 - GTextArea >> GEvent." + event + " @ " + millis());
} //_CODE_:Rules_Input:350320:

public void Angle_Changed(GTextField source, GEvent event) { //_CODE_:Rules_Input:350320:
  println("textarea1 - GTextArea >> GEvent." + event + " @ " + millis());
} //_CODE_:Rules_Input:350320:

public void button_Click(GButton source, GEvent event) { //_CODE_:Generate:561832:
    //println("Generate - GButton >> GEvent." + event + " @ " + millis());
  
  verifyInput();
  
} //_CODE_:Generate:561832:


String axiomRegex = "^(([a-zA-Z\\-\\+])|(\\[[a-zA-Z\\-\\+]+\\])|(\\[(([a-zA-Z\\-\\+])|(\\[[a-zA-Z\\-\\+]\\]))+\\]))+$";
String ruleRegex = "^[a-zA-Z]=(([a-zA-Z\\-\\+])|(\\[[a-zA-Z\\-\\+]+\\])|(\\[(([a-zA-Z\\-\\+])|(\\[[a-zA-Z\\-\\+]\\]))+\\]))+$";
String DecimalNumber = "^-?(\\d*\\.)?\\d+$";
String WholeNumber = "^\\d+$";

void verifyInput(){
  Error_Text.setText("");
  String[] matches;
  matches = match(Iterations_Input.getText(), WholeNumber);
  if(matches == null){
    Error_Text.setText("Invalid Iterations");
    return;
  }
  
  //matches = match(X_Coord.getText(), DecimalNumber);
  if(X_Coord.getValueF() == 0 && Y_Coord.getValueF() == 0){
    Error_Text.setText("Invalid Orientation");
    return;
  }
  
  matches = match(Angle_Input.getText(), DecimalNumber);
  if(matches == null){
    Error_Text.setText("Invalid Angle");
    return;
  }
  
  String axiom = Axiom_Input.getText().replaceAll("\\s+", "");
  matches = match(axiom, axiomRegex);
  if(matches == null){
    Error_Text.setText("Invalid Axiom");
    return;
  }
  
  String tempRules = Rules_Input.getText();
  String[] rules;
  println("("+tempRules+")");
  if(tempRules != " "){
    tempRules = tempRules.replaceAll("\\n+", ",").replaceAll(" +", "");
    
    rules = split(tempRules, ",");
    /*if(rules[0] == "" && rules.length == 1){
      Error_Text.setText("No hay reglas");
      return;
    }*/
    
    for(String rule : rules){
       matches = match(rule, ruleRegex);
       if(matches == null){
        Error_Text.setText("Invalid Rules");
        return;
      }
    }
  
  
    //rules match. Lets check repetitions
    int[] letters = new int[255];
    for(String rule : rules){
      int pos = int(rule.charAt(0));
       letters[pos]++;
       if(letters[pos] > 1){
         Error_Text.setText("Tiene Reglas Repetidas");
         return;
       }
    }
  }else{
    rules = new String[0];
  }
  
  ITER = int(Iterations_Input.getText());
  ANGLE = float(Angle_Input.getText()) * PI/180.0;
  AXIOM = axiom;
  RULES = rules;
  
  float x = X_Coord.getValueF();
  float y = -Y_Coord.getValueF();
  float norm = sqrt(x*x + y*y);
  x = x/norm; y = y/norm;
  Initial_Angle = atan2(y,x);
  
  constructFigure();
}



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(8);
  G4P.setMouseOverEnabled(false);
  G4P.setDisplayFont("", G4P.PLAIN, 20);
  G4P.setInputFont("Ubuntu", G4P.BOLD, 18);
  surface.setTitle("Sketch Window");
  
  Title = new GLabel(this, 5, 5, 400, 30);
  Title.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  Title.setText("L-Systems");
  Title.setOpaque(false);
  
  Iterations_Input = new GTextField(this, 190, 47, 215, 30, G4P.SCROLLBARS_NONE);
  Iterations_Input.setPromptText("Input Iterations total");
  //Iterations_Input.setNumeric(0,15,-1);
  Iterations_Input.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  Iterations_Input.setOpaque(true);
  Iterations_Input.addEventHandler(this, "Iterations_change");
  Iteraciones_Text = new GLabel(this, 20, 51, 158, 20);
  Iteraciones_Text.setText("Iterations");
  Iteraciones_Text.setOpaque(false);
  
  Orientation = new GLabel(this, 20, 84, 155, 20);
  Orientation.setText("Orientation");
  Orientation.setOpaque(false);
  
  X_Coord = new GTextField(this, 190, 84, 215, 30, G4P.SCROLLBARS_NONE);
  X_Coord.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  X_Coord.setPromptText("X-Component");
  X_Coord.setNumeric(-1000000.0, 1000000.0, 0.0);
  X_Coord.setOpaque(true);
  X_Coord.addEventHandler(this, "XCoord_Change");
  
  Y_Coord = new GTextField(this, 190, 119, 215, 30, G4P.SCROLLBARS_NONE);
  Y_Coord.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  Y_Coord.setPromptText("Y-Component");
  Y_Coord.setNumeric(-1000000.0, 1000000.0, 0.0);
  Y_Coord.setOpaque(true);
  Y_Coord.addEventHandler(this, "YCoord_Change");
  
  X_Text = new GLabel(this, 153, 83, 37, 32);
  X_Text.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  X_Text.setText("X");
  X_Text.setOpaque(false);
  Y_Text = new GLabel(this, 158, 118, 29, 29);
  
  Y_Text.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  Y_Text.setText("Y");
  Y_Text.setOpaque(false);
  
  Angle_Text = new GLabel(this, 20, 160, 149, 27);
  Angle_Text.setText("Angle");
  Angle_Text.setOpaque(false);
  Angle_Input = new GTextField(this, 190, 160, 215, 30, G4P.SCROLLBARS_NONE);
  Angle_Input.setPromptText("Input Angle");
  Angle_Input.setOpaque(true);
  Angle_Input.addEventHandler(this, "Angle_Changed");
  Angle_Input.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  
  Axiom_Text = new GLabel(this, 20, 205, 149, 27);
  Axiom_Text.setText("Axiom");
  Axiom_Text.setOpaque(false);
  Axiom_Input = new GTextField(this, 190, 205, 215, 40, G4P.SCROLLBARS_HORIZONTAL_ONLY | G4P.SCROLLBARS_AUTOHIDE);
  Axiom_Input.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  Axiom_Input.setPromptText("Input Axiom");
  Axiom_Input.setOpaque(true);
  Axiom_Input.addEventHandler(this, "Axiom_Changed");
  
  Rules_Text = new GLabel(this, 20, 255, 149, 26);
  Rules_Text.setText("Rules");
  Rules_Text.setOpaque(false);
  Rules_Input = new GTextArea(this, 190, 255, 215, 250, G4P.SCROLLBARS_BOTH | G4P.SCROLLBARS_AUTOHIDE);
  Rules_Input.setLocalColorScheme(GCScheme.BLUE_SCHEME);
  Rules_Input.setPromptText("Input Rules");
  Rules_Input.setOpaque(true);
  Rules_Input.addEventHandler(this, "Rules_Changed");

  Error_Text = new GLabel(this, 20, 520, 380, 30);
  Error_Text.setText("Errors will be shown here.");
  Error_Text.setLocalColorScheme(GCScheme.RED_SCHEME);
  Error_Text.setOpaque(false);
  
  Generate = new GButton(this, 415, 5, 105, 30);
  Generate.setText("Generate");
  Generate.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  Generate.addEventHandler(this, "button_Click");

}

// Variable declarations 
// autogenerated do not edit
GLabel Title; 
GTextField Iterations_Input; 
GLabel Iteraciones_Text; 
GLabel Orientation; 
GTextField X_Coord; 
GTextField Y_Coord; 
GLabel X_Text;
GLabel Y_Text; 
GLabel Axiom_Text; 
GTextField Axiom_Input; 
GLabel Rules_Text; 
GLabel Letters_Text; 
GTextField Letters_Input; 
GTextArea Rules_Input; 
GLabel Error_Text; 
GButton Generate; 
GLabel Angle_Text; 
GTextField Angle_Input; 
